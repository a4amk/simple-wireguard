#!/bin/bash
#
# Simple WireGuard Manager by a4amk (Main Entry Point)
# This script intelligently checks for WireGuard installation status and provides a central menu
# to manage the exit node, clients, and installation settings.
#
# NOTE: This script must be run from the root directory alongside the 'tools/' folder containing:
# 1. tools/setup (The configuration script)
# 2. tools/client-manager (The peer management script)

# --- Configuration Variables ---
WG_CONFIG_FILE="/etc/wireguard/wg0.conf"
SETUP_SCRIPT="./tools/setup"
MANAGER_SCRIPT="./tools/client-manager"
WG_INTERFACE="wg0"

# --- Helper Functions ---

check_root() {
	if [[ $EUID -ne 0 ]]; then
		echo "Error: This script must be run as root or with sudo."
		exit 1
	fi
}

check_setup_status() {
	if [ -f "$WG_CONFIG_FILE" ] && command -v wg &> /dev/null; then
		return 0 # Setup is complete
	else
		return 1 # Setup is not complete
	fi
}

# Extracts the uninstall logic from the setup script to allow the launcher to run it directly
uninstall() {
	echo -e "\n--- Starting WireGuard Uninstallation and Cleanup ---"
	
	# 1. Stop and disable service
	echo "Stopping and disabling WireGuard service..."
	systemctl stop wg-quick@${WG_INTERFACE} 2>/dev/null
	systemctl disable wg-quick@${WG_INTERFACE} 2>/dev/null

	# 2. Restore /etc/sysctl.conf
	echo "Restoring IP forwarding settings..."
	sed -i '/^net.ipv4.ip_forward=1/d' /etc/sysctl.conf
	sed -i '/^net.ipv6.conf.all.forwarding=1/d' /etc/sysctl.conf
	sysctl -p 2>/dev/null
	
	# 3. Remove configuration files and backups
	echo "Removing WireGuard configuration files and backups..."
	rm -f /etc/wireguard/wg*.conf /etc/wireguard/wg*.bak.*
	rm -rf "wg-clients" 
	
	# 4. Purge package
	echo "Purging wireguard package..."
	apt autoremove --purge wireguard -y
	
	echo -e "\n--- WireGuard Uninstallation Complete ---"
	echo "The server has been returned to its pre-setup state."
	exit 0
}

# --- Installation Modification Function ---

modify_installation() {
	echo -e "\n--- Modify Installation Settings ---"

	# Load current values
	local OLD_PORT=$(grep 'ListenPort' "$WG_CONFIG_FILE" | awk '{print $3}' | head -n 1)
	local OLD_ADDRESSES=$(grep '^Address' "$WG_CONFIG_FILE" | awk '{print $3}')
	local OLD_ENDPOINT=$(grep 'Endpoint' "$MANAGER_SCRIPT" 2>/dev/null | grep -oE 'vpn\.[a-zA-Z0-9\.\-]+|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | head -n 1) # Crude extraction from client manager

	echo "Current Port: $OLD_PORT"
	echo "Current Server Internal IPs: $OLD_ADDRESSES"
	
	# 1. New Port
	local NEW_PORT
	read -r -p "Enter NEW WireGuard Port (Leave blank to keep $OLD_PORT): " PORT_INPUT
	NEW_PORT="${PORT_INPUT:-$OLD_PORT}"

	# 2. New Endpoint (User will need to update client configs manually)
	local NEW_ENDPOINT
	read -r -p "Enter NEW Public Endpoint/Domain (Leave blank to keep '$OLD_ENDPOINT'): " ENDPOINT_INPUT
	NEW_ENDPOINT="${ENDPOINT_INPUT:-$OLD_ENDPOINT}"

	if [ "$NEW_PORT" != "$OLD_PORT" ]; then
		echo "Updating ListenPort in $WG_CONFIG_FILE..."
		sed -i "s/ListenPort = $OLD_PORT/ListenPort = $NEW_PORT/g" "$WG_CONFIG_FILE"
		
		# Update Firewall Rules
		echo "Updating Firewall rules..."
		if command -v ufw &> /dev/null; then
			ufw delete allow $OLD_PORT/udp 2>/dev/null
			ufw allow $NEW_PORT/udp comment 'Updated WireGuard VPN'
		elif command -v firewall-cmd &> /dev/null; then
			firewall-cmd --zone=public --remove-port=$OLD_PORT/udp --permanent 2>/dev/null
			firewall-cmd --zone=public --add-port=$NEW_PORT/udp --permanent 2>/dev/null
			firewall-cmd --reload 2>/dev/null
		fi
	fi
	
	# 3. Handle Endpoint Update (Requires manual update to ALL client configs)
	if [ "$NEW_ENDPOINT" != "$OLD_ENDPOINT" ]; then
		echo -e "\nWARNING: Endpoint changed from $OLD_ENDPOINT to $NEW_ENDPOINT."
		echo "This script CANNOT automatically update client configuration files."
		echo "You MUST use the Client Manager to generate new client configurations."
	fi
	
	# 4. Reload Service
	echo "Reloading WireGuard service to apply changes..."
	systemctl reload wg-quick@${WG_INTERFACE} 2>/dev/null
	echo "Configuration update complete."
	
	if [ "$NEW_ENDPOINT" != "$OLD_ENDPOINT" ] || [ "$NEW_PORT" != "$OLD_PORT" ]; then
		echo "Please update your client devices with the new endpoint: $NEW_ENDPOINT:$NEW_PORT"
	fi
}

# --- Main Logic ---

check_root

# Check if setup is complete
if ! check_setup_status; then
	echo -e "\n======================================================="
	echo " WireGuard NOT Configured! Starting Initial Setup..."
	echo "======================================================="
	
	if [ ! -f "$SETUP_SCRIPT" ]; then
		echo "Error: Installation script ($SETUP_SCRIPT) not found. Please ensure 'setup' is in the 'tools/' subdirectory."
		exit 1
	fi
	
	# Run the setup script
	"$SETUP_SCRIPT"
	exit 0
fi

# If configured, display the main menu
while true; do
	echo -e "\n======================================================="
	echo " üåê Simple WireGuard Manager"
	echo "======================================================="
	echo "1) Manage Clients (Add/Remove/List Peers)"
	echo "2) Modify Installation (Change Port or Endpoint)"
	echo "3) Uninstall WireGuard (Cleanup and Restore)"
	echo "4) Exit"
	echo "-------------------------------------------------------"
	
	local CHOICE
	read -r -p "Enter your choice (1-4): " CHOICE

	case "$CHOICE" in
		1)
			# Execute the separate client manager script
			if [ ! -f "$MANAGER_SCRIPT" ]; then
				echo "Error: Client Manager script ($MANAGER_SCRIPT) not found. Please ensure 'client-manager' is in the 'tools/' subdirectory."
			else
				"$MANAGER_SCRIPT"
			fi
			;;
		2)
			modify_installation
			;;
		3)
			uninstall
			;;
		4)
			echo "Exiting."
			exit 0
			;;
		*)
			echo "Invalid option. Please enter 1, 2, 3, or 4."
			;;
	esac
done
